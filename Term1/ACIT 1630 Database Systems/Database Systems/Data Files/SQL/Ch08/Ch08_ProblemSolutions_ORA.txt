/* Database Systems, Coronel/Morris */
/* Type of SQL : Oracle  */

/* Chapter 8 Problem Solutions */

-- 1
CREATE TABLE EMP_1 (
EMP_NUM    VARCHAR(3) PRIMARY KEY,
EMP_LNAME  VARCHAR(15) NOT NULL,
EMP_FNAME  VARCHAR(15) NOT NULL,
EMP_INITIAL CHAR(1),
EMP_HIREDATE DATE, 
JOB_CODE VARCHAR(3),
CONSTRAINT EMP_1_JOB_CODE_FK FOREIGN KEY (JOB_CODE) REFERENCES JOB (JOB_CODE));


-- 2
INSERT INTO EMP_1 VALUES ('101', 'News', 'John', 'G', '08-NOV-2000', '502');
INSERT INTO EMP_1 VALUES ('102', 'Senior', 'David', 'H', '12-JUL-1989', '501'); 

-- 3
INSERT INTO EMP_1 SELECT EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_HIREDATE, JOB_CODE FROM EMPLOYEE WHERE EMP_NUM BETWEEN 103 AND 109;

-- 4
COMMIT;

-- 5
UPDATE EMP_1
SET JOB_CODE = 501
WHERE EMP_NUM = 107;

-- 6
DELETE FROM EMP_1
WHERE EMP_LNAME = 'Smithfield' 
AND EMP_FNAME = 'William'
AND EMP_HIREDATE = '22-JUN-2004' 
AND JOB_CODE = 500;

-- 7
CREATE TABLE EMP_2 AS SELECT * FROM EMP_1;

-- 8
ALTER TABLE EMP_2
ADD EMP_PCT NUMBER(4,2)
ADD PROJ_NUM CHAR(3);

-- 9
UPDATE EMP_2
SET EMP_PCT = 3.85
WHERE EMP_NUM = 103;

-- 10
UPDATE EMP_2
SET EMP_PCT = 5
WHERE EMP_NUM IN (101, 105, 107);

-- 11
UPDATE EMP_2
SET EMP_PCT = 10
WHERE EMP_PCT IS NULL;

-- 12
UPDATE EMP_2
SET EMP_PCT = EMP_PCT + .15
WHERE EMP_FNAME = 'Maria' 
AND EMP_LNAME = 'Alonzo'
AND EMP_INITIAL = 'D';

-- 13
UPDATE EMP_2
SET PROJ_NUM = 18
WHERE JOB_CODE = 500;

-- 14
UPDATE EMP_2
SET PROJ_NUM = 25
WHERE JOB_CODE >= 502;

-- 15
UPDATE EMP_2
SET PROJ_NUM = 14
WHERE EMP_HIREDATE < '01-JAN-1994' AND JOB_CODE >= 501;

-- 16
CREATE TABLE CUSTOMER (
CUST_NUM     INTEGER PRIMARY KEY,
CUST_LNAME   VARCHAR(30),
CUST_FNAME   VARCHAR(30),
CUST_BALANCE NUMBER(8,2));

-- 17
CREATE TABLE INVOICE (
INV_NUM    INTEGER PRIMARY KEY,
CUST_NUM   INTEGER,
INV_DATE   DATE,
INV_AMOUNT NUMBER(10,2),
FOREIGN KEY (CUST_NUM) REFERENCES CUSTOMER(CUST_NUM));

-- 18
INSERT INTO CUSTOMER VALUES (1000, 'Smith', 'Jeanne', 1050.11);
INSERT INTO CUSTOMER VALUES (1001, 'Ortega', 'Juan', 840.92);

-- 19
INSERT INTO INVOICE VALUES (8000, 1000, '23-MAR-2016', 235.89);
INSERT INTO INVOICE VALUES (8001, 1001, '23-MAR-2016', 312.82);
INSERT INTO INVOICE VALUES (8002, 1001, '30-MAR-2016', 528.10);
INSERT INTO INVOICE VALUES (8003, 1000, '16-APR-2016', 194.78);
INSERT INTO INVOICE VALUES (8004, 1000, '23-APR-2016', 619.44);

-- 20
CREATE SEQUENCE CUST_NUM_SEQ
START WITH 2000;

-- 21
CREATE SEQUENCE INV_NUM_SEQ
START WITH 9000;

-- 22
INSERT INTO CUSTOMER (CUST_NUM, CUST_LNAME, CUST_FNAME, CUST_BALANCE) 
VALUES (CUST_NUM_SEQ.NEXTVAL, 'Powers', 'Ruth', 500);

-- 23
ALTER TABLE CUSTOMER ADD CUST_DOB DATE;

-- 24
UPDATE CUSTOMER
SET CUST_DOB = '15-MAR-1989'
WHERE CUST_NUM = 1000;

-- 25
UPDATE CUSTOMER
SET CUST_DOB = '22-DEC-1988'
WHERE CUST_NUM = 1001;


-- 26
CREATE OR REPLACE TRIGGER TRG_UPDATECUSTBALANCE
AFTER INSERT ON INVOICE
FOR EACH ROW
BEGIN
	UPDATE	CUSTOMER
	SET	CUST_BALANCE = CUST_BALANCE + :NEW.INV_AMOUNT
	WHERE	CUST_NUM = :NEW.CUST_NUM;
END;
/
--To test the trigger you do the following:
SELECT * FROM CUSTOMER;
INSERT INTO INVOICE VALUES (8005,1001,'27-APR-2017',225.40);
SELECT * FROM CUSTOMER;


-- 27
CREATE OR REPLACE PROCEDURE PRC_CUST_ADD
(W_CN IN NUMBER, W_CLN IN VARCHAR, W_CFN IN VARCHAR, W_CBAL IN NUMBER) AS 
BEGIN
	INSERT INTO CUSTOMER (CUST_NUM, CUST_LNAME, CUST_FNAME, CUST_BALANCE)
	VALUES (W_CN, W_CLN, W_CFN, W_CBAL);
END;
/

--To test the procedure:

EXEC PRC_CUST_ADD(1002,'Rauthor','Peter',0.00);
SELECT * FROM CUSTOMER;

-- 28
CREATE OR REPLACE PROCEDURE PRC_INVOICE_ADD
(W_IN IN NUMBER, W_CN IN NUMBER, W_ID IN DATE, W_IA IN NUMBER) AS 
BEGIN
	INSERT INTO INVOICE
	VALUES (W_IN, W_CN, W_ID, W_IA);
END;
/

--To test the procedure:

SELECT * FROM CUSTOMER;
SELECT * FROM INVOICE;
EXEC PRC_INVOICE_ADD(8006,1000,'30-APR-2017',301.72);
SELECT * FROM INVOICE;
SELECT * FROM CUSTOMER;

-- 29
CREATE OR REPLACE TRIGGER TRG_UPDATECUSTBALANCE2
AFTER DELETE ON INVOICE
FOR EACH ROW
BEGIN
	UPDATE	CUSTOMER
	SET	CUST_BALANCE = CUST_BALANCE - :OLD.INV_AMOUNT
	WHERE	CUST_NUM = :OLD.CUST_NUM;
END;
/

-- 30
CREATE OR REPLACE PROCEDURE PRC_INV_DELETE (W_IN IN NUMBER) AS 
BEGIN
	IF W_IN IS NOT NULL THEN
		DELETE FROM INVOICE WHERE INV_NUM = W_IN;
	END IF;
END;
/

--To test the procedure:

SELECT * FROM CUSTOMER;
SELECT * FROM INVOICE;
EXEC PRC_INV_DELETE(8005);
EXEC PRC_INV_DELETE(8006);
SELECT * FROM INVOICE;
SELECT * FROM CUSTOMER;

-- 31
CREATE OR REPLACE TRIGGER TRG_LINE_TOTAL
BEFORE INSERT ON LINE
FOR EACH ROW
BEGIN
	:NEW.LINE_TOTAL := :NEW.LINE_UNITS * :NEW.LINE_PRICE;
END;
/


-- 32
CREATE OR REPLACE TRIGGER TRG_LINE_PROD
AFTER INSERT ON LINE
FOR EACH ROW
BEGIN
	UPDATE	PRODUCT
	SET	P_QOH = P_QOH - :NEW.LINE_UNITS
	WHERE	PRODUCT.P_CODE = :NEW.P_CODE;
END;
/

-- 33
CREATE OR REPLACE PROCEDURE PRC_INV_AMOUNTS (W_IN IN NUMBER) AS 
W_CHK  NUMBER := 0;
W_SUBT NUMBER := 0;
W_TAX   NUMBER := 0;
BEGIN
	-- VALIDATE INVOICE NUMBER
	SELECT COUNT(*) INTO W_CHK FROM INVOICE 
	WHERE INV_NUMBER = W_IN;

	IF W_CHK = 1 THEN
		-- COMPUTE THE W_SUBT
		SELECT SUM(LINE_TOTAL) INTO W_SUBT FROM LINE
		WHERE LINE.INV_NUMBER = W_IN;
		-- COMPUTE W_TAX
		W_TAX := W_SUBT * 0.08;
		-- UPDATE INVOICE
		UPDATE INVOICE
	SET INV_SUBTOTAL = W_SUBT,
		INV_TAX = W_TAX,
		INV_TOTAL = W_SUBT + W_TAX
	WHERE INV_NUMBER = W_IN;
	END IF;
END;
/

-- 34
CREATE OR REPLACE PROCEDURE PRC_CUS_BALANCE_UPDATE (W_IN IN NUMBER) AS
W_CUS NUMBER := 0;
W_TOT NUMBER := 0;
BEGIN
	-- GET THE CUS_CODE
	SELECT CUS_CODE INTO W_CUS 
	FROM INVOICE
	WHERE INVOICE.INV_NUMBER = W_IN;

	-- UPDATES CUSTOMER IF W_CUS > 0
	IF W_CUS > 0 THEN
		UPDATE CUSTOMER
		SET CUS_BALANCE = CUS_BALANCE + 
					(SELECT INV_TOTAL FROM INVOICE WHERE INV_NUMBER = W_IN)
		WHERE CUS_CODE = W_CUS;
	END IF;
END;
/


-- 35
ALTER TABLE MODEL
ADD MOD_WAIT_CHG NUMBER (5,2);

-- 36
UPDATE MODEL
SET MOD_WAIT_CHG = 100
WHERE MOD_CODE = 'C-90A';

UPDATE MODEL
SET MOD_WAIT_CHG = 50
WHERE MOD_CODE = 'PA23-250';

UPDATE MODEL
SET MOD_WAIT_CHG = 75
WHERE MOD_CODE = 'PA31-350';

-- 37
ALTER TABLE CHARTER
	ADD CHAR_WAIT_CHG NUMBER(6,2)
	ADD CHAR_FLT_CHG_HR NUMBER(6,2)
	ADD CHAR_FLT_CHG NUMBER(10,2)
	ADD CHAR_TAX_CHG NUMBER(6,2)
	ADD CHAR_TOT_CHG NUMBER(10,2)
	ADD CHAR_PYMT NUMBER(10,2)
	ADD CHAR_BALANCE NUMBER(10,2);


-- 38
UPDATE CHARTER
SET CHAR_WAIT_CHG = (
	SELECT	MOD_WAIT_CHG FROM MODEL JOIN AIRCRAFT ON MODEL.MOD_CODE = AIRCRAFT.MOD_CODE
	WHERE	AIRCRAFT.AC_NUMBER = CHARTER.AC_NUMBER);


-- 39
UPDATE CHARTER
SET CHAR_FLT_CHG_HR = (
	SELECT	MOD_CHG_MILE FROM MODEL JOIN AIRCRAFT ON MODEL.MOD_CODE = AIRCRAFT.MOD_CODE
	WHERE	AIRCRAFT.AC_NUMBER = CHARTER.AC_NUMBER);


-- 40
UPDATE CHARTER
SET CHAR_FLT_CHG = CHAR_HOURS_FLOWN * CHAR_FLT_CHG_HR;


-- 41
UPDATE CHARTER
SET CHAR_TAX_CHG = CHAR_FLT_CHG * 0.08;


-- 42
UPDATE CHARTER
SET CHAR_TOT_CHG = CHAR_FLT_CHG + CHAR_TAX_CHG;


-- 43
ALTER TABLE PILOT ADD PIL_PIC_HRS NUMBER(8,2);

-- 44
CREATE OR REPLACE TRIGGER TRG_CHAR_HOURS
AFTER INSERT ON CHARTER
FOR EACH ROW
BEGIN
	UPDATE AIRCRAFT
	SET	AC_TTAF = AC_TTAF + :NEW.CHAR_HOURS_FLOWN,
		AC_TTEL = AC_TTEL + :NEW.CHAR_HOURS_FLOWN,
		AC_TTER = AC_TTER + :NEW.CHAR_HOURS_FLOWN
	WHERE  AIRCRAFT.AC_NUMBER = :NEW.AC_NUMBER;
END;
/

-- 45
CREATE OR REPLACE TRIGGER TRG_PIC_HOURS
AFTER INSERT ON CREW
FOR EACH ROW
BEGIN
	IF :NEW.CREW_JOB = 'Pilot' THEN
		UPDATE PILOT
		SET PIL_PIC_HRS = PIL_PIC_HRS +
	(SELECT CHAR_HOURS_FLOWN FROM CHARTER 
	WHERE CHAR_TRIP = :NEW.CHAR_TRIP)
		WHERE EMP_NUM = :NEW.EMP_NUM;
	END IF;
END;
/

-- 46
CREATE OR REPLACE TRIGGER TRG_CUST_BALANCE
AFTER INSERT ON CHARTER
FOR EACH ROW
BEGIN
	UPDATE CUSTOMER
	SET CUS_BALANCE = CUS_BALANCE + :NEW.CHAR_TOT_CHG
	WHERE CUSTOMER.CUS_CODE = :NEW.CUS_CODE;
END;
/

-- 47
CREATE TABLE PRICE (
PRICE_CODE		NUMBER(2,0)  PRIMARY KEY,
PRICE_DESCRIPTION	VARCHAR(20)  NOT NULL  ,
PRICE_RENTFEE		NUMBER(5,2) CHECK (PRICE_RENTFEE >= 0),
PRICE_DAILYLATEFEE	NUMBER(5,2) CHECK (PRICE_DAILYLATEFEE >= 0)
);

CREATE TABLE MOVIE (
MOVIE_NUM	NUMBER(8,0)  PRIMARY KEY,
MOVIE_TITLE	VARCHAR(75) NOT NULL,
MOVIE_YEAR	NUMBER(4,0)  CHECK (MOVIE_YEAR > 1900),
MOVIE_COST	NUMBER(5,2),
MOVIE_GENRE	VARCHAR(50),
PRICE_CODE	NUMBER(2,0), 
FOREIGN KEY(PRICE_CODE) REFERENCES PRICE(PRICE_CODE)
);  

CREATE TABLE VIDEO (
VID_NUM		NUMBER(8,0) PRIMARY KEY,
VID_INDATE		DATE,
MOVIE_NUM	NUMBER(8,0), 
FOREIGN KEY (MOVIE_NUM) REFERENCES MOVIE(MOVIE_NUM)
);

CREATE TABLE MEMBERSHIP (
MEM_NUM		NUMBER(8,0) PRIMARY KEY,
MEM_FNAME	VARCHAR(30) NOT NULL,
MEM_LNAME	VARCHAR(30) NOT NULL,
MEM_STREET	VARCHAR(120),
MEM_CITY		VARCHAR(50),
MEM_STATE	CHAR(2),
MEM_ZIP		CHAR(5),
MEM_BALANCE	NUMBER(10,2)
);

CREATE TABLE RENTAL (
RENT_NUM	NUMBER(8,0),
RENT_DATE	DATE,
MEM_NUM	NUMBER(8,0),
FOREIGN KEY (MEM_NUM) REFERENCES MEMBERSHIP(MEM_NUM)
);

CREATE TABLE DETAILRENTAL (
RENT_NUM			NUMBER(8,0) ,
VID_NUM			NUMBER(8,0) ,
DETAIL_FEE			NUMBER(5,2),
DETAIL_DUEDATE		DATE,
DETAIL_RETURNDATE	DATE,
DETAIL_DAILYLATEFEE	NUMBER(5,2),
CONSTRAINT DETAIL_RENT_VID_PK PRIMARY KEY (RENT_NUM, VID_NUM));

-- 48
-- PRICE
INSERT INTO PRICE VALUES (1, 'Standard', 2, 1);
INSERT INTO PRICE VALUES (2, 'New Release', 3.5, 3);
INSERT INTO PRICE VALUES (3, 'Discount', 1.5, 1);
INSERT INTO PRICE VALUES (4, 'Weekly Special', 1, .5);

-- MOVIE
INSERT INTO MOVIE VALUES (1234, 'The Cesar Family Christmas', 2016, 39.95, 'FAMILY', 2);
INSERT INTO MOVIE VALUES (1235, 'Smokey Mountain Wildlife', 2013, 59.95, 'ACTION', 1);
INSERT INTO MOVIE VALUES (1236, 'Richard Goodhope', 2017, 59.95, 'DRAMA', 2);
INSERT INTO MOVIE VALUES (1237, 'Beatnik Fever', 2016, 29.95, 'COMEDY', 2);
INSERT INTO MOVIE VALUES (1238, 'Constant Companion', 2017, 89.95, 'DRAMA', NULL);
INSERT INTO MOVIE VALUES (1239, 'Where Hope Dies', 2007, 25.49, 'DRAMA', 3);
INSERT INTO MOVIE VALUES (1245, 'Time to Burn', 2014, 45.49, 'ACTION', 1);
INSERT INTO MOVIE VALUES (1246, 'What He Doesn''t Know', 2015, 58.29, 'COMEDY', 1);

-- VIDEO
INSERT INTO VIDEO VALUES (54321, '18-JUN-2017', 1234);
INSERT INTO VIDEO VALUES (54324, '18-JUN-2017', 1234);
INSERT INTO VIDEO VALUES (54325, '18-JUN-2017', 1234);
INSERT INTO VIDEO VALUES (34341, '22-JAN-2016', 1235);
INSERT INTO VIDEO VALUES (34342, '22-JAN-2016', 1235);
INSERT INTO VIDEO VALUES (34366, '02-MAR-2018', 1236);
INSERT INTO VIDEO VALUES (34367, '02-MAR-2018', 1236);
INSERT INTO VIDEO VALUES (34368, '02-MAR-2018', 1236);
INSERT INTO VIDEO VALUES (34369, '02-MAR-2018', 1236);
INSERT INTO VIDEO VALUES (44392, '21-OCT-2017', 1237);
INSERT INTO VIDEO VALUES (44397, '21-OCT-2017', 1237);
INSERT INTO VIDEO VALUES (59237, '14-FEB-2018', 1237);
INSERT INTO VIDEO VALUES (61388, '25-JAN-2016', 1239);
INSERT INTO VIDEO VALUES (61353, '28-JAN-2015', 1245);
INSERT INTO VIDEO VALUES (61354, '28-JAN-2015', 1245);
INSERT INTO VIDEO VALUES (61367, '30-JUL-2017', 1246);
INSERT INTO VIDEO VALUES (61369, '30-JUL-2017', 1246);

 
-- MEMBERSHIP
INSERT INTO MEMBERSHIP VALUES (102, 'TAMI', 'DAWSON', '2632 TAKLI CIRCLE', 'NORENE', 'TN', '37136', 11);
INSERT INTO MEMBERSHIP VALUES (103, 'CURT', 'KNIGHT', '4025 CORNELL COURT', 'FLATGAP', 'KY', '41219', 6);
INSERT INTO MEMBERSHIP VALUES (104, 'JAMAL', 'MELENDEZ', '788 EAST 145TH AVENUE', 'QUEBECK', 'TN', '38579', 0);
INSERT INTO MEMBERSHIP VALUES (105, 'IVA', 'MCCLAIN', '6045 MUSKET BALL CIRCLE', 'SUMMIT', 'KY', '42783', 15);
INSERT INTO MEMBERSHIP VALUES (106, 'MIRANDA', 'PARKS', '4469 MAXWELL PLACE', 'GERMANTOWN', 'TN', '38183', 0);
INSERT INTO MEMBERSHIP VALUES (107, 'ROSARIO', 'ELLIOTT', '7578 DANNER AVENUE', 'COLUMBIA', 'TN', '38402', 5);
INSERT INTO MEMBERSHIP VALUES (108, 'MATTIE', 'GUY', '4390 EVERGREEN STREET', 'LILY', 'KY', '40740', 0);
INSERT INTO MEMBERSHIP VALUES (109, 'CLINT', 'OCHOA', '1711 ELM STREET', 'GREENEVILLE', 'TN', '37745', 10);
INSERT INTO MEMBERSHIP VALUES (110, 'LEWIS', 'ROSALES', '4524 SOUTHWIND CIRCLE', 'COUNCE', 'TN', '38326', 0);
INSERT INTO MEMBERSHIP VALUES (111, 'STACY', 'MANN', '2789 EAST COOK AVENUE', 'MURFREESBORO', 'TN', '37132', 8);
INSERT INTO MEMBERSHIP VALUES (112, 'LUIS', 'TRUJILLO', '7267 MELVIN AVENUE', 'HEISKELL', 'TN', '37754', 3);
INSERT INTO MEMBERSHIP VALUES (113, 'MINNIE', 'GONZALES', '6430 VASILI DRIVE', 'WILLISTON', 'TN', '38076', 0);

-- RENTAL
INSERT INTO RENTAL VALUES (1001, '01-MAR-2018', 103);
INSERT INTO RENTAL VALUES (1002, '01-MAR-2018', 105);
INSERT INTO RENTAL VALUES (1003, '02-MAR-2018', 102);
INSERT INTO RENTAL VALUES (1004, '02-MAR-2018', 110);
INSERT INTO RENTAL VALUES (1005, '02-MAR-2018', 111);
INSERT INTO RENTAL VALUES (1006, '02-MAR-2018', 107);
INSERT INTO RENTAL VALUES (1007, '02-MAR-2018', 104);
INSERT INTO RENTAL VALUES (1008, '03-MAR-2018', 105);
INSERT INTO RENTAL VALUES (1009, '03-MAR-2018', 111);

-- DETAILRENTAL
INSERT INTO DETAILRENTAL VALUES (1001, 34342, 2, '04-MAR-2018', '02-MAR-2018', NULL);
INSERT INTO DETAILRENTAL VALUES (1001, 34366, 3.5, '04-MAR-2018', '02-MAR-2018', 3);
INSERT INTO DETAILRENTAL VALUES (1001, 61353, 2, '04-MAR-2018', '03-MAR-2018', 1);
INSERT INTO DETAILRENTAL VALUES (1002, 59237, 3.5, '04-MAR-2018', '04-MAR-2018', 3);
INSERT INTO DETAILRENTAL VALUES (1003, 54325, 3.5, '04-MAR-2018', '09-MAR-2018', 3);
INSERT INTO DETAILRENTAL VALUES (1003, 61369, 2, '06-MAR-2018', '09-MAR-2018', 1);
INSERT INTO DETAILRENTAL VALUES (1003, 61388, 0, '06-MAR-2018', '09-MAR-2018', 1);
INSERT INTO DETAILRENTAL VALUES (1004, 34341, 2, '07-MAR-2018', '07-MAR-2018', 1);
INSERT INTO DETAILRENTAL VALUES (1004, 34367, 3.5, '05-MAR-2018', '07-MAR-2018', 3);
INSERT INTO DETAILRENTAL VALUES (1004, 44392, 3.5, '05-MAR-2018', '07-MAR-2018', 3);
INSERT INTO DETAILRENTAL VALUES (1005, 34342, 2, '07-MAR-2018', '05-MAR-2018', 1);
INSERT INTO DETAILRENTAL VALUES (1005, 44397, 3.5, '05-MAR-2018', '05-MAR-2018', 3);
INSERT INTO DETAILRENTAL VALUES (1006, 34366, 3.5, '05-MAR-2018', '04-MAR-2018', 3);
INSERT INTO DETAILRENTAL VALUES (1006, 61367, 2, '07-MAR-2018', NULL, 1);
INSERT INTO DETAILRENTAL VALUES (1007, 34368, 3.5, '05-MAR-2018', NULL, 3);
INSERT INTO DETAILRENTAL VALUES (1008, 34369, 3.5, '05-MAR-2018', '05-MAR-2018', 3);
INSERT INTO DETAILRENTAL VALUES (1009, 54324, 3.5, '05-MAR-2018', NULL, 3);

COMMIT;

-- 49
UPDATE MOVIE
SET MOVIE_YEAR = 2014
WHERE MOVIE_NUM = 1245;

-- 50
UPDATE MOVIE
SET PRICE_CODE = 3
WHERE MOVIE_GENRE = 'ACTION';

-- 51
UPDATE PRICE
SET PRICE_RENTFEE = PRICE_RENTFEE + .5;

-- 52
ALTER TABLE DETAILRENTAL
ADD DETAIL_DAYSLATE NUMBER(3,0);

-- 53
UPDATE DETAILRENTAL 
SET DETAIL_RETURNDATE = To_Date('2018-03-02 10:00:00', 'YYYY-MM-DD HH24:MI:SS')
WHERE RENT_NUM = 1001 AND VID_NUM = 34342;

UPDATE DETAILRENTAL 
SET DETAIL_RETURNDATE = To_Date('2018-03-03 11:30:00', 'YYYY-MM-DD HH24:MI:SS')
WHERE RENT_NUM = 1001 AND VID_NUM = 61353;

UPDATE DETAILRENTAL 
SET DETAIL_RETURNDATE = To_Date('2018-03-04 15:30:00', 'YYYY-MM-DD HH24:MI:SS')
WHERE RENT_NUM = 1002;

UPDATE DETAILRENTAL 
SET DETAIL_RETURNDATE = To_Date('2018-03-09 16:00:00', 'YYYY-MM-DD HH24:MI:SS')
WHERE RENT_NUM = 1003;

UPDATE DETAILRENTAL 
SET DETAIL_RETURNDATE = To_Date('2018-03-07 09:00:00', 'YYYY-MM-DD HH24:MI:SS')
WHERE RENT_NUM = 1004;

UPDATE DETAILRENTAL 
SET DETAIL_RETURNDATE = To_Date('2018-03-05 12:30:00', 'YYYY-MM-DD HH24:MI:SS')
WHERE RENT_NUM = 1005;

UPDATE DETAILRENTAL 
SET DETAIL_RETURNDATE = To_Date('2018-03-04 10:15:00', 'YYYY-MM-DD HH24:MI:SS')
WHERE RENT_NUM = 1006 AND VID_NUM = 34366;

UPDATE DETAILRENTAL 
SET DETAIL_RETURNDATE = NULL
WHERE RENT_NUM = 1006 AND VID_NUM = 61367;

UPDATE DETAILRENTAL 
SET DETAIL_RETURNDATE = NULL
WHERE RENT_NUM = 1007;

UPDATE DETAILRENTAL 
SET DETAIL_RETURNDATE = To_Date('2018-03-05 21:30:00', 'YYYY-MM-DD HH24:MI:SS')
WHERE RENT_NUM = 1008;

UPDATE DETAILRENTAL 
SET DETAIL_RETURNDATE = NULL
WHERE RENT_NUM = 1009;

UPDATE DETAILRENTAL 
SET DETAIL_RETURNDATE = To_Date('2018-03-02 10:00:00', 'YYYY-MM-DD HH24:MI:SS')
WHERE RENT_NUM = 1001 AND VID_NUM = 34366;


-- 54
ALTER TABLE VIDEO 
ADD VID_STATUS VARCHAR(4) DEFAULT 'IN'
CONSTRAINT VIDEO_VID_STATUS_CK CHECK (VID_STATUS IN ('IN', 'OUT', 'LOST'));
 

-- 55
UPDATE VIDEO
SET VID_STATUS = 'OUT'
WHERE VID_NUM IN (SELECT VID_NUM FROM DETAILRENTAL WHERE DETAIL_RETURNDATE IS NULL);

-- 56
ALTER TABLE PRICE
ADD PRICE_RENTDAYS NUMBER(2,0) DEFAULT 3 NOT NULL;

-- 57
UPDATE PRICE
SET PRICE_RENTDAYS = 5
WHERE PRICE_CODE = 1;

UPDATE PRICE
SET PRICE_RENTDAYS = 5
WHERE PRICE_CODE = 3;

UPDATE PRICE
SET PRICE_RENTDAYS = 7
WHERE PRICE_CODE = 4;

-- 58
CREATE OR REPLACE TRIGGER TRG_LATE_RETURN
BEFORE UPDATE OF DETAIL_RETURNDATE, DETAIL_DUEDATE ON DETAILRENTAL
FOR EACH ROW
BEGIN
IF :NEW.DETAIL_RETURNDATE IS NULL THEN
  :NEW.DETAIL_DAYSLATE := NULL;
ELSIF Trunc(:NEW.DETAIL_RETURNDATE) <= Trunc(:NEW.DETAIL_DUEDATE) 
      OR (Trunc(:NEW.DETAIL_RETURNDATE) = Trunc(:NEW.DETAIL_DUEDATE) + 1 
      AND To_CHAR(:NEW.DETAIL_RETURNDATE, 'HH24:MI:SS') <= '12:00:00') THEN
  :NEW.DETAIL_DAYSLATE := 0;
ELSE
  :NEW.DETAIL_DAYSLATE := Trunc(:NEW.DETAIL_RETURNDATE) - Trunc(:NEW.DETAIL_DUEDATE);
END IF;
END;
/


-- 59
CREATE OR REPLACE TRIGGER TRG_MEM_BALANCE
AFTER UPDATE OF DETAIL_DUEDATE, DETAIL_RETURNDATE ON DETAILRENTAL
FOR EACH ROW
DECLARE
  PRIOR_LATEFEE NUMBER;
  NEW_LATEFEE   NUMBER;
  UPDATE_AMOUNT NUMBER;
  RENTAL_MEMBER RENTAL.MEM_NUM%TYPE;
BEGIN
  PRIOR_LATEFEE := :OLD.DETAIL_DAYSLATE * :OLD.DETAIL_DAILYLATEFEE;
  IF PRIOR_LATEFEE IS NULL THEN
    PRIOR_LATEFEE := 0;
  END IF;
  NEW_LATEFEE := :NEW.DETAIL_DAYSLATE * :NEW.DETAIL_DAILYLATEFEE;
  IF NEW_LATEFEE IS NULL THEN
    NEW_LATEFEE := 0;
  END IF;
  UPDATE_AMOUNT := NEW_LATEFEE - PRIOR_LATEFEE;
  IF UPDATE_AMOUNT <> 0 THEN
    SELECT MEM_NUM
    INTO RENTAL_MEMBER
    FROM RENTAL
    WHERE RENT_NUM = :NEW.RENT_NUM;

    UPDATE MEMBERSHIP
    SET MEM_BALANCE = MEM_BALANCE + UPDATE_AMOUNT
    WHERE MEM_NUM = RENTAL_MEMBER;
  END IF;
END;
/


-- 60
CREATE SEQUENCE RENT_NUM_SEQ 
START WITH 1100
INCREMENT BY 1
NOCACHE;


-- 61
CREATE OR REPLACE PROCEDURE PRC_NEW_RENTAL (MEM_NUM_TEMP IN MEMBERSHIP.MEM_NUM%TYPE) AS
  MEM_NUM_COUNT    NUMBER;
  PREV_MEM_BALANCE MEMBERSHIP.MEM_BALANCE%TYPE;
BEGIN
  SELECT Count(*)
  INTO MEM_NUM_COUNT
  FROM MEMBERSHIP
  WHERE MEM_NUM = MEM_NUM_TEMP;

  IF MEM_NUM_COUNT = 0 THEN
    Dbms_Output.PUT_LINE('No Membership with number: ' || MEM_NUM_TEMP || ' exists.');
  ELSE
    SELECT MEM_BALANCE
    INTO PREV_MEM_BALANCE
    FROM MEMBERSHIP
    WHERE MEM_NUM = MEM_NUM_TEMP;
    Dbms_Output.PUT_LINE('Previous balance: ' || To_Char(PREV_MEM_BALANCE, '$999,999,990.99'));
    INSERT INTO RENTAL (RENT_NUM, RENT_DATE, MEM_NUM) 
    VALUES (RENT_NUM_SEQ.NEXTVAL, SYSDATE, MEM_NUM_TEMP);
  END IF;
END;
/


-- 62
CREATE OR REPLACE PROCEDURE PRC_NEW_DETAIL(VID_NUM_TEMP IN VIDEO.VID_NUM%TYPE) AS
  VID_NUM_COUNT   NUMBER;
  STATUS_TEMP     VIDEO.VID_STATUS%TYPE;
  RENT_FEE        PRICE.PRICE_RENTFEE%TYPE;
  LATE_FEE        PRICE.PRICE_DAILYLATEFEE%TYPE;
  RENT_DAYS       PRICE.PRICE_RENTDAYS%TYPE;
  DUE_DATE        DATE;
BEGIN
  SELECT Count(*)
  INTO VID_NUM_COUNT
  FROM VIDEO
  WHERE VID_NUM = VID_NUM_TEMP;
  
  IF VID_NUM_COUNT = 0 THEN
    Dbms_Output.PUT_LINE('No Video with number ' || VID_NUM_TEMP || ' was found.');
  ELSE
    SELECT VID_STATUS 
    INTO STATUS_TEMP
    FROM VIDEO
    WHERE VID_NUM = VID_NUM_TEMP;

    IF STATUS_TEMP <> 'IN' THEN
      Dbms_Output.PUT_LINE('The video is not currently IN.  Video return must be entered before it can be rented again.');
    ELSE
      SELECT PRICE_RENTFEE, PRICE_DAILYLATEFEE, PRICE_RENTDAYS
      INTO RENT_FEE, LATE_FEE, RENT_DAYS
      FROM VIDEO JOIN MOVIE USING (MOVIE_NUM) JOIN PRICE USING (PRICE_CODE)
      WHERE VID_NUM = VID_NUM_TEMP;

      DUE_DATE := To_Date(To_Char(SYSDATE, 'MM/DD/YYYY') || ' 23:59:59', 'MM/DD/YYYY HH24:MI:SS') + RENT_DAYS;

      INSERT INTO DETAILRENTAL(RENT_NUM, VID_NUM, DETAIL_FEE, DETAIL_DUEDATE, DETAIL_DAILYLATEFEE)
      VALUES (RENT_NUM_SEQ.CURRVAL, VID_NUM_TEMP, RENT_FEE, DUE_DATE, LATE_FEE);

      UPDATE VIDEO
      SET VID_STATUS = 'OUT'
      WHERE VID_NUM = VID_NUM_TEMP;

    END IF;
  END IF;
END;
/


-- 63
CREATE OR REPLACE PROCEDURE PRC_RETURN_VIDEO (VID_NUM_TEMP IN VIDEO.VID_NUM%TYPE) AS
  VID_NUM_COUNT   NUMBER;
  RENTALS_COUNT   NUMBER;
BEGIN
  SELECT Count(*)
  INTO VID_NUM_COUNT
  FROM VIDEO
  WHERE VID_NUM = VID_NUM_TEMP;

  IF VID_NUM_COUNT = 0 THEN
    Dbms_Output.PUT_LINE('Video number ' || VID_NUM_TEMP || ' not found.');
  ELSE
    SELECT Count(*)
    INTO RENTALS_COUNT
    FROM DETAILRENTAL
    WHERE VID_NUM = VID_NUM_TEMP AND DETAIL_RETURNDATE IS NULL;

    IF RENTALS_COUNT > 1 THEN
      Dbms_Output.PUT_LINE('ERROR: Video has multiple outstanding Rentals.');
    ELSE
      UPDATE VIDEO
      SET VID_STATUS = 'IN'
      WHERE VID_NUM = VID_NUM_TEMP;
      
      IF RENTALS_COUNT = 0 THEN
        Dbms_Output.PUT_LINE('No rentals found.  Video is available for rental.');
      ELSE
        UPDATE DETAILRENTAL
        SET DETAIL_RETURNDATE = SYSDATE
        WHERE VID_NUM = VID_NUM_TEMP AND DETAIL_RETURNDATE IS NULL;
        Dbms_Output.PUT_LINE('Video successfully returned and available for rental.');
      END IF;
    END IF;
  END IF ;
END;
/


